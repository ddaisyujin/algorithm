#include <string>
#include <vector>
#include <unordered_map>
#include <algorithm>
#include <stack>

using namespace std;

vector<string> solution(vector<vector<string>> tickets) {
	vector<string> answer;

	/*
	*	"만일 가능한 경로가 2개 이상일 경우 알파벳 순서가 앞서는 경로 ..."
	*
	*	tickets 데이터를 통해
	*	그래프를 만들고 그 그래프를 참고해서 경로(stack)를 찾을 건데,
	*	벡터는 앞을 빼는 것보다 뒷 쪽을 빼는게 쉬움
	*/
	sort(tickets.begin(), tickets.end(), greater<vector<string>>());


	/*
	*	src1 - dest[0], dest[1], ....
	*	src2 - dest[0]
	*
	*	map의 value를 "vector형으로 선언"하면,
	*	한 개의 key에 여러 value 가능
`   */
	unordered_map<string, vector<string>> g;


	/*
	*	g[string] = value;
	*	이렇게 해도 자연스럽게 key와 value가 추가되는 것 같다.
	*
	*	- value가 vector일 때
	*	g[string].push_back(value);
	*/
	for (int i = 0; i < tickets.size(); i++)
	{
		g[tickets[i][0]].push_back(tickets[i][1]);
	}


	//DFS 코드------------------------------------------
	// 0. stack 생성
	stack<string> stk;

	// 1. stack에 먼저 넣어 놓고 시작
	stk.push("ICN"); //항상 인천공항에서 먼저 출발함

	//3.
	while (!stk.empty())
	{
		// 3-0. 현재 나의 위치는?
		string current = stk.top();

		// 3-1. 갈 수 있는 경로가 있음
		if (!g[current].empty())
		{
			stk.push(g[current].back());
			g[current].pop_back();
		}
		// 3-2. 갈 수 있는 경로가 없음
		else
		{
			answer.push_back(current);
			stk.pop();
		}
	}

	// stack에 처음 들어가는 건 시작점
	// 도착지 - C - B - A - 출발점
	// 따라서 순서를 뒤집어준다.
	reverse(answer.begin(), answer.end());

	return answer;
}
​